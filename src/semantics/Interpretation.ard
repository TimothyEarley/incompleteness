\import Data.Array (insert, insert_zro)
\import Data.Fin
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import syntax.Context
\import syntax.Free
\import syntax.lift.Lift
\import syntax.Substitution
\import syntax.Syntax
\import syntax.lift.LiftFormula
\import syntax.lift.LiftVar
\import util.SetUtil
\open Context (variable)
\open Nat (+)

\record Structure (L : Language)
  | Universe : \Set
  | rel : \Pi (r : Relations) (args : Array Universe (relArity r)) -> \Prop
  | fun : \Pi (f : Functions) (args : Array Universe (funArity f)) -> Universe

\record Interpretation {L : Language} (c : Context)
  | structure : Structure L
  | variableValues : \Pi (variable c) -> structure.Universe
  \where {
    \open Substitution

    \func extend {_ : Language} {c : Context}
                 (interp : Interpretation c) (u : interp.structure.Universe) : Interpretation (Context.inc c) interp.structure
    \cowith
      | variableValues v => \case \elim v \with {
        | 0 => u
        | suc v => interp.variableValues v
      }

    \func extendAt {_ : Language} {c : Context} (I : Interpretation c) (u : I.structure.Universe) (at : Fin (suc c))
      : Interpretation (suc c) I.structure \cowith
      | variableValues => insert u I.variableValues at
      \where {
        \func at0 {_ : Language} {c : Context} {I : Interpretation c} {u : I.structure.Universe}
          : extend I u = extendAt I u 0 => ext $ ext (\lam _ => unfold (rewrite insert_zro (mcases idp)))

        \func atSuc {_ : Language} {c : Context} {I : Interpretation c} {u u' : I.structure.Universe}
                    {at : Fin (suc c)} : extend (extendAt I u at) u' = extendAt (extend I u') u (suc at) =>
          ext $ ext (\lam _ => unfold $ mcases idp)
      }

    \func extend' {_ : Language} {c : Context} (I : Interpretation c) {n : Nat} (us : Array I.structure.Universe n)
      : Interpretation (n + c) I.structure
    \elim n, us
      | 0, nil => I
      | suc n, a :: us => extend' (extend I a) us

    \func evaluate {_ : Language} {c : Context} (interp : Interpretation c) (t : Term c) : interp.structure.Universe
    \elim t
      | var v => interp.variableValues v
      | apply f args => interp.structure.fun f (\lam i => evaluate interp (args i))

    \func models \alias \infix 6 ⊧ {_ : Language} {c : Context} (interp : Interpretation c) (f : Formula c) : \Prop
    \elim f
      | equal a b => evaluate interp a = evaluate interp b
      | atomic r terms => interp.structure.rel r (\lam i => evaluate interp (terms i))
      | notH f => Not (interp ⊧ f)
      | forAllH f => \Pi (u : interp.structure.Universe) -> (extend interp u) ⊧ f
      | impH antecedent consequent => interp ⊧ antecedent -> interp ⊧ consequent -- TODO classical?
      | cExists f => ∃ (u : interp.structure.Universe) (extend interp u ⊧ f)
      | cAnd a b => \Sigma (interp ⊧ a) (interp ⊧ b)
      \where {
        \func contradict {_ : Language} {c : Context} {I : Interpretation c} {f : Formula c}
                         (h1 : I ⊧ f) (h2 : I ⊧ notH f) : Empty => h2 h1

        \func fromSub {_ : Language} {c : Context} {f : Formula (Context.inc c)}
                      {I : Interpretation c} {t : Term c} (h : extend I (evaluate I t) ⊧ f)
          : I ⊧ subst f t => substitutionLemma<-
            I {extend I (evaluate I t)} {substOne t}
            (\lam v => cases v idp)
            h
          \where {
            \func substitutionLemma<- {_ : Language} {c c' : Context} {f : Formula c}
                                      (I : Interpretation c') {I' : Interpretation c I.structure} {s : Substitution c c'}
              -- this makes sure I' is the interpretation we get when replacing I with terms from s
                                      (hI' : \Pi (v : variable c) -> I'.variableValues v = evaluate I (s v))
                                      (h : I' ⊧ f)
              : I ⊧ substitute f s
            \elim f
              | equal a b => evaluateSubstituteTerm I (\lam v => hI' v) *> h *> (inv $ evaluateSubstituteTerm I hI')
              | atomic r terms => transport (rel r) (ext $ ext (\lam j => inv (evaluateSubstituteTerm I hI'))) h
              | notH f1 => \lam m => h $ substitutionLemma-> I hI' m
              | impH a f1 => \lam m => substitutionLemma<- I hI' $ h $ substitutionLemma-> I hI' m
              | cAnd a b => (substitutionLemma<- I hI' h.1, substitutionLemma<- I hI' h.2)
              | forAllH f => \lam u =>
                  substitutionLemma<- (extend I u) {extend I' u} {Extend.extends s}
                      (\case \elim __ \with {
                        | 0 => idp
                        | suc v => hI' v *> rewrite (Extend.extends.atSuc s) (inv extendRenameOne)
                      })
                      (h u)
              | cExists f1 => \case \elim h \with {
                | inP (u, h) => inP (
                  u,
                  substitutionLemma<-
                      (extend I u) {extend I' u} {Extend.extends s}
                      (\case \elim __ \with {
                        | 0 => idp
                        | suc v => hI' v *> rewrite (Extend.extends.atSuc s) (inv extendRenameOne)
                      })
                      h
                )
              }

            \func substitutionLemma-> {_ : Language} {c c' : Context} {f : Formula c}
                                      (I : Interpretation c') {I' : Interpretation c I.structure} {s : variable c -> Term c'}
              -- this makes sure I' is the interpretation we get when replacing I with terms from s
                                      (hI' : \Pi (v : variable c) -> I'.variableValues v = evaluate I (s v)) (h : I ⊧ substitute f s)
              : I' ⊧ f
            \elim f
              | equal a b => (inv $ evaluateSubstituteTerm I hI') *> h *> evaluateSubstituteTerm I hI'
              | atomic r terms => transport (rel r) (ext $ ext (\lam _ => evaluateSubstituteTerm I hI')) h
              | notH f1 => \lam m => h $ substitutionLemma<- I hI' m
              | impH a f1 => \lam m => substitutionLemma-> I hI' $ h $ substitutionLemma<- I hI' m
              | cAnd a b => (substitutionLemma-> I hI' h.1, substitutionLemma-> I hI' h.2)
              | forAllH f1 => \lam u =>
                  substitutionLemma-> (extend I u) {extend I' u} {Extend.extends s}
                      (\case \elim __ \with {
                        | 0 => idp
                        | suc v => hI' v *> rewrite (Extend.extends.atSuc s) (inv extendRenameOne)
                      })
                      (h u)
              | cExists f1 => \case \elim h \with {
                | inP (u, h) => inP (
                  u,
                  substitutionLemma->
                      (extend I u) {extend I' u} {Extend.extends s}
                      (\case \elim __ \with {
                        | 0 => idp
                        | suc v => hI' v *> rewrite (Extend.extends.atSuc s) (inv extendRenameOne)
                      })
                      h
                )
              }

            \private \func extendRenameOne {_ : Language} {c : Context} {I : Interpretation c} {u : I.structure.Universe}
                                           {t : Term c}
              : evaluate (extend I u) (Rename.renameTerm t fsuc) = evaluate I t
            \elim t
              | var v => idp
              | apply f1 args => pmap (fun f1) (ext $ ext $ (\lam j => extendRenameOne {_} {_} {_} {_} {args j}))

            \private \func evaluateSubstituteTerm {_ : Language} {c c' : Context} {x : Term c}
                                                  (I : Interpretation c') {I' : Interpretation c I.structure} {s : variable c -> Term c'}
                                                  (hI' : \Pi (v : variable c) -> I'.variableValues v = evaluate I (s v))
              : evaluate I (substituteTerm x s) = evaluate I' x
            \elim x
              | var v => inv (hI' v)
              | apply f1 args => pmap (fun f1) (ext $ ext (\lam j => evaluateSubstituteTerm {_} {c} {c'} {args j} I hI'))
          }

        \func lifted {_ : Language} {c : Context} {I : Interpretation c} {f : Formula c}
                     {u : I.structure.Universe}
                     (m : I ⊧ f)
          : extend I u ⊧ liftFormula 1 f =>
          transport2
              (⊧)
              (inv extendAt.at0)
              (inv liftFormula.liftFormula1At.at0)
              (ignoresNotFree m)
          \where {
            -- very similar to substitution lemma, as lifting is just a rename which is a limited subsitution.
            -- TODO: could this be proven just by calling subsitution lemma?

            \private \func lookup {X : \Set} {x : X} {n : Nat} {l : Array X n} {at : Fin (suc n)} {i : Fin n}
              : insert x l at (liftFin1At at i) = l i
            \elim n, l, at, i
              | suc n, a :: l, 0, 0 => idp
              | suc n, a :: l, 0, suc i => idp
              | suc n, a :: l, suc at, 0 => idp
              | suc n, a :: l, suc at, suc i => lookup

            \private \func evaluateLifted {_ : Language} {c : Context} {I : Interpretation c}
                                          {u : I.structure.Universe} {at : variable (suc c)} {t : Term c}
              : evaluate (extendAt I u at) (Rename.renameTerm t (liftFin1At at)) = evaluate I t
            \elim t
              | var v => lookup
              | apply f args => pmap (fun f) (ext $ ext (\lam j => evaluateLifted {_} {_} {_} {_} {_} {args j}))

            \func ignoresNotFree {_ : Language} {c : Context} {I : Interpretation c} {f : Formula c}
                                 {u : I.structure.Universe} {v : variable (suc c)}
                                 (m : I ⊧ f)
              : (extendAt I u v) ⊧ (liftFormula.liftFormula1At f v)
            \elim f
              | equal a b => evaluateLifted *> m *> inv evaluateLifted
              | atomic r terms => transport (rel r) (ext $ ext (\lam _ => inv evaluateLifted)) m
              | notH f => \lam m1 => m $ ignoresNotFreeRev m1
              | impH f g => \lam m1 => ignoresNotFree (m $ ignoresNotFreeRev m1)
              | cAnd f g => (ignoresNotFree m.1, ignoresNotFree m.2)
              | forAllH f => \lam u' =>
                  transport2 (⊧)
                      (inv extendAt.atSuc)
                      liftFormula.liftFormula1At.atSuc
                      (ignoresNotFree {_} {suc c} {extend I u'} {f} {u} {fsuc v} (m u'))
              | cExists f => \case \elim m \with {
                | inP (u', m') => inP (
                  u',
                  transport2 (⊧)
                      (inv extendAt.atSuc)
                      liftFormula.liftFormula1At.atSuc
                      (ignoresNotFree {_} {_} {extend I u'} {f} {u} {fsuc v} m')
                )
              }

            \func ignoresNotFreeRev {_ : Language} {c : Context} {I : Interpretation c} {f : Formula c}
                                    {u : I.structure.Universe} {v : variable (suc c)}
                                    (m : (extendAt I u v) ⊧ (liftFormula.liftFormula1At f v))
              : I ⊧ f
            \elim f
              | equal a b => inv evaluateLifted *> m *> evaluateLifted
              | atomic r terms => transport (rel r) (ext $ ext (\lam _ => evaluateLifted)) m
              | notH f => \lam m1 => m $ ignoresNotFree m1
              | impH f g => \lam m1 => ignoresNotFreeRev (m $ ignoresNotFree m1)
              | cAnd f g => (ignoresNotFreeRev m.1, ignoresNotFreeRev m.2)
              | forAllH f => \lam u' =>
                  ignoresNotFreeRev (transport2 (⊧) extendAt.atSuc (inv liftFormula.liftFormula1At.atSuc) (m u'))
              | cExists f => \case \elim m \with {
                | inP (u', m') => inP (
                  u',
                  ignoresNotFreeRev (transport2 (⊧) extendAt.atSuc (inv liftFormula.liftFormula1At.atSuc) m')
                )
              }
          }
      }

    \func modelsAllAxioms \alias \infix 6 ⊧A {_ : Language} {c : Context} (interp : Interpretation c) (Phi : Theory c) : \Prop =>
      \Pi {phi : Formula c} (phi ∈ Phi) -> interp ⊧ phi
      \where {
        \func fromAdd {_ : Language} {c : Context} {I : Interpretation c} {Phi : Theory c} {phi : Formula c}
                      (hPhi : I ⊧A Phi) (hphi : I ⊧ phi) : I ⊧A add Phi phi => \lam {_} e => fromAddHelper hPhi hphi e

        \private \func fromAddHelper {_ : Language} {c : Context} {I : Interpretation c} {Phi : Theory c} {phi : Formula c}
                                     (hPhi : I ⊧A Phi) (hphi : I ⊧ phi) {f : Formula c} (el : f ∈ add Phi phi) : I ⊧ f
        \elim el
          | byLeft a => hPhi a
          | byRight idp => hphi

        \func lifted {_ : Language} {c : Context} {I : Interpretation c} {Phi : Theory c}
                     {u : I.structure.Universe}
                     (m : I ⊧A Phi)
          : extend I u ⊧A liftTheory {_} {1} Phi =>
          \lam {_} (inP (f, fPhi, idp)) => ⊧.lifted (m fPhi)
      }

    \func implies \alias \infix 6 ⊧I {_ : Language} {c : Context} (Phi : Theory c) (phi : Formula c) =>
      \Pi (I : Interpretation c) (I ⊧A Phi) -> I ⊧ phi
  }

\module InterprreteExtensions \where {
  \open FormulaExtensions
  \open Interpretation

  \func modelsCExists' {_ : Language} {c : Context} {I : Interpretation c} {m : Nat} {f : Formula (m + c)} (h : I ⊧ cExists' m f)
    : ∃ (a : Array I.structure.Universe m) (Interpretation.extend' I a ⊧ f)
  \elim m
    | 0 => \let h' => rewrite (\peval cExists' 0 f) in h \in inP (nil, h')
    | suc m => \case rewrite (\peval cExists' (suc m) f) h \with {
      | inP (u, h') => \case modelsCExists' h' \with {
        | inP (a, h'') => inP (u :: a, h'')
      }
    }
}