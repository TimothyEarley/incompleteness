\import Data.Array
\import Data.Fin (fsuc)
\import Data.Or
\import Equiv
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Set
\import Set.Fin
\import Set.Subset
\import util.ArrayUtil

\func element \alias \infix 6 ∈ {X : \Set} (x : X) (S : Set X) : \Prop => S x

\func not-element \alias \infix 6 ∉ {X : \Set} (x : X) (S : Set X) : \Prop => Not (S x)

\func Elements {X : \Set} (S : Set X) : \Set => \Sigma (x : X) (x ∈ S)

\func emptySet \alias ∅ {X : \Set} : Set X => \lam _ => Empty

\func union \alias \infix 6 ∪ {X : \Set} (S S' : Set X) : Set X => \lam y => y ∈ S || y ∈ S'

\func finiteUnion {X : \Set} (S : Array (Set X)) : Set X => \lam x => ∃ (i : Fin S.len) (x ∈ S i)
  \where {
    \func recursive {X : \Set} (S : Array (Set X)) : Set X
    \elim S
      | nil => ∅
      | a :: l => a ∪ recursive l

    \func asRecursive {X : \Set} {S : Array (Set X)} : finiteUnion S = recursive S
    \elim S
      | nil => ext (\lam _ => ext (\case __ \with {
      (inP ((), _))
      }, absurd))
      | a :: l => \let rec => asRecursive {X} {l} \in unfold finiteUnion
          (ext (\lam _ => ext (
            \case \elim __ \with {
              | inP (0, h) => byLeft h
              | inP (suc i, h) => byRight $ rewriteI rec $ inP (i, h)
            },
            \case \elim __ \with {
              | byLeft h => inP (0, h)
              | byRight h => \case rewriteI rec in h \with {
                | inP (i, h') => inP (fsuc i, h')
              }
            }
          )))
  }

\func without \alias \infix 6 ∖ {X : \Set} (S S' : Set X) : Set X => \lam y => \Sigma (y ∈ S) (y ∉ S')

\func add {X : \Set} (S : Set X) (x : X) : Set X => S ∪ (single x)

\func delete {X : \Set} (S : Set X) (x : X) : Set X => S ∖ (single x)

\func setOfArray {X : \Set} (a : Array X) : Set X => \lam x => TruncP (Index x a)

\func unionOfArray {X : \Set} {a a' : Array X} : setOfArray a ∪ setOfArray a' = setOfArray (a ++ a') =>
  ext (\lam x => ext (
    \case __ \with {
      | byLeft (inP i) => inP $ index-left i
      | byRight (inP i) => inP $ index-right i
    },
    \lam (inP (i, h)) => \case \elim x, \elim i, \elim h, ++.split-index i \with {
      | _, _, idp, inl (i', idp) => byLeft (inP (i', inv $ ++.++_index-left _))
      | _, _, idp, inr (i', idp) => byRight (inP (i', inv ++.++_index-right))
    }
  ))

\func withoutOfArray' {X : \Set} {a : Array X} {S : Set X} (dec : \Pi (x : X) -> Dec (x ∈ S)) : setOfArray a ∖ S = setOfArray (remove dec a) =>
  ext (\lam x => ext (
    \lam h => \case \elim x, \elim h \with {
      | _, (inP (i, idp), h) => inP $ remove.element h
    },
    \lam h => \case \elim x, \elim h \with {
      | _, inP (i, idp) => (inP $ \let (i', h') => remove.preimage i \in (i', inv h'), remove.no-element dec)
    }
  ))

\func setOfArrayNub {X : DecSet} {a : Array X} : Elements (setOfArray a) = Elements (setOfArray (nub a)) =>
  pmap Elements $ ext (\lam x => ext
      (\case \elim x, __ \with {
        | _, inP (i, idp) => inP (nub-isSurj a i)
      },
       \case \elim x, __ \with {
         | _, inP (i, idp) => \let (i', h') => nub-preimage i \in inP (i', inv h')
       })
  )

\func mapSet {X Y : \Set} (S : Set X) (f : \Pi (x : X) (e : x ∈ S) -> Y) : Set Y =>
  \lam y => ∃ (x : X) (e : x ∈ S) (y = f x e)

\func mapSetArray {X Y : \Set} {a : Array X} {f : \Pi (x : X) (e : x ∈ setOfArray a) -> Y}
  : mapSet (setOfArray a) f = setOfArray (\lam j => f (a j) (inP (j, idp))) =>
  ext $ (\lam y => ext $ (
                           \case \elim y, \elim __ \with {
                             | _, inP (x, inP (i, idp), idp) => inP (i, idp)
                           },
                           \case \elim y, \elim __ \with {
                             | _, inP (i, idp) => inP (a i, inP (i, idp), idp)
                           }
                         ))

\module SubsetHelper \where {
  \func subsetAdd {X : \Set} {x : X} {S S' : Set X} (h : S ⊆ S') : add S x ⊆ add S' x => \case \elim __ \with {
    | byLeft a => byLeft (h a)
    | byRight b => byRight b
  }

  \func subsetSingle {X : \Set} {S : Set X} {x : X} (h : x ∈ S) : single x ⊆ S => transport S __ h

  \func subsetUnion {X : \Set} {S S' S'' : Set X} (h : S ⊆ S'') (h' : S' ⊆ S'') : S ∪ S' ⊆ S'' => \case __ \with {
    | byLeft a => h a
    | byRight b => h' b
  }

  \func subsetFiniteUnion {X : \Set} {S : Array (Set X)} {S' : Set X} (h : DArray {S.len} (\lam i => S i ⊆ S'))
    : finiteUnion S ⊆ S' => \case __ \with {
    | inP (i, e) => h i e
  }

  \func subsetFiniteUnion' {X : \Set} {S : Array (Set X)} {S' : Set X} (h : Index S' S)
    : S' ⊆ finiteUnion S => \lam e => inP (h.1, rewrite h.2 e)

  \func subsetDelete {X : \Set} {S S' : Set X} {x : X} (h : S ⊆ add S' x) : delete S x ⊆ S' =>
    \lam d => \case h d.1 \with {
      | byLeft a => a
      | byRight b => absurd $ d.2 b
    }

  \func addDelete {X : DecSet} {S : Set X} {x : X} : S ⊆ add (delete S x) x => \lam {y} e => \case decideEq x y \with {
    | yes p => byRight p
    | no n => byLeft (e, n)
  }

  \func emptySubset {X : \Set} {S : Set X} : ∅ ⊆ S => \lam e => absurd e

  \func setSubset {X Y : \Set} {S S' : Set X} {f : X -> Y}
                  (sub : S ⊆ S')
    : mapSet S (\lam x _ => f x) ⊆ mapSet S' (\lam x _ => f x) => \case \elim __ \with {
    | inP (x, e, p) => inP (x, sub e, p)
  }
}

\module FinSets \where {
  \func FinSingle {X : \Set} {x : X} : FinSet (Elements (single x)) \cowith
    | finCard => 1
    | finEq => inP \new QEquiv {
      | f _ => (x, idp)
      | ret _ => 0
      | ret_f => \case \elim __ \with {
        | 0 => idp
      }
      | f_sec (x', p') => ext p'
    }

  \func FinArrayNoDupes {X : \Set} {a : Array X} (h : NoDupes a) : FinSet (Elements (setOfArray a)) \cowith
    | finCard => a.len
    | finEq => inP \new QEquiv {
      | f i => (a i, inP (i, idp))
      | ret (_, e) => extractFin h e
      | ret_f i => \peval extractFin h (inP (i,idp))
      | f_sec e => \case \elim e \with {
        | (_, inP (i, idp)) => ext $
        transportInv (a __ = a i) (\peval extractFin h (inP (i,idp))) idp
      }
    }
    \where {
      \sfunc extractFin {X : \Set} {a : Array X} {x : X} (nd : NoDupes a) (h : x ∈ setOfArray a) : Fin a.len
      \elim h
        | inP (i, _) => i
        | truncP (inP (i1, p1)) (inP (i2, p2)) i => nd (p1 *> inv p2) @ i
    }

  \func FinArray {X : DecSet} {a : Array X} : FinSet (Elements (setOfArray a)) =>
    rewriteI setOfArrayNub in FinArrayNoDupes {X} {nub a} nub-isInj

  \func finToArray {X : DecSet} {S : Set X} (h : FinSet (Elements S)) : ∃ (a : Array X h.finCard) (S = setOfArray a) =>
    \case h.finSurj \with {
      | inP (f, fSurj) => inP
          (\lam i => (f i).1,
           ext (\lam x => ext (
             \lam xElS => \let foo => fSurj (x, xElS) \in TruncP.map foo (\lam (x', h') => (x', pmap __.1 h')),
             \case \elim x, __ \with {
               | _, inP (j, idp) => (f j).2
             }
           ))
          )
    }

  \func FinUnion {X : DecSet} {S S' : Set X} (h : FinSet (Elements S)) (h' : FinSet (Elements S'))
    : FinSet (Elements (S ∪ S')) => \case finToArray h, finToArray h' \with {
    | inP (arr1, p1), inP (arr2, p2) => run {
      rewrite (p1, p2),
      transportInv (\lam X => FinSet (Elements X)) unionOfArray,
      FinArray
    }
  }

  \func FinFiniteUnion {X : DecSet} (S : Array (Set X))
                       (h : DArray {S.len} (\lam i => FinSet (Elements (S i)))) : FinSet (Elements (finiteUnion S))
  \elim S
    | nil => rewrite finiteUnion.asRecursive FinEmpty
    | a :: l => rewrite finiteUnion.asRecursive $ FinUnion (h 0) (rewriteI finiteUnion.asRecursive (FinFiniteUnion _ (\lam i => h (suc i))))

  \func FinWithout {X : DecSet} {S S' : Set X} (h : FinSet (Elements S)) (d : \Pi (x : X) -> Dec (x ∈ S')) : FinSet (Elements (S ∖ S')) =>
    \case finToArray h \with {
      | inP (a, p) => run {
        rewrite p,
        transportInv (\lam z => FinSet (Elements z)) (withoutOfArray' d),
        FinArray
      }
    }

  \func FinEmpty {X : \Set} : FinSet (Elements {X} ∅) =>
    \let p : Elements ∅ = Empty => ext \new QEquiv {
      | f e => usingOnly e.2 contradiction
      | ret => contradiction
      | ret_f e => usingOnly e.2 contradiction
      | f_sec => contradiction
    }
    \in rewriteI p in EmptyFin

  \func FinMap {X Y : DecSet} {S : Set X} (h : FinSet (Elements S))
               (f : \Pi (x : X) (e : x ∈ S) -> Y)
               (fIgnoresE : \Pi (x : X) (e e' : x ∈ S) -> f x e = f x e')
    : FinSet (Elements (mapSet S f)) => \case finToArray h \with {
    | inP (a, p) =>
      \let
        | S' => mapSet (setOfArray a) (\lam x e => f x $ rewrite p e)
        | p' : mapSet S f = S' => ext (\lam _ => ext (
          \case \elim __ \with {
            | inP (x, e, q) => inP (x, rewriteI p e, q *> fIgnoresE x _ _)
          },
          \case \elim __ \with {
            | inP (x, e, q) => inP (x, rewrite p e, q *> fIgnoresE x _ _)
          }
        ))
      \in rewrite p' $ FinMap' _
  }
    \where {
      \func FinMap' {X : \Set} {Y : DecSet} {n : Nat} {a : Array X n}
                    (f : \Pi (x : X) (x ∈ setOfArray a) -> Y)
        : FinSet (Elements (mapSet (setOfArray a) f)) =>
        \let
          | a' : Array Y a.len => \lam j => f (a j) (inP (j, idp))
          | p : mapSet (setOfArray a) f = setOfArray a' => mapSetArray {X} {Y} {a} {f}
        \in rewrite p $ FinArray {Y} {a'}
    }
}