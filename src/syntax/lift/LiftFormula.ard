\import Data.Fin
\import Function.Meta
\import Logic
\import Paths
\import Paths.Meta
\import syntax.Context
\import syntax.Free
\import syntax.Substitution
\import syntax.Syntax
\import syntax.lift.LiftVar
\open Nat (+)

\func liftFormula {_ : Language} (delta : Context) {c : Context} (f : Formula c) : Formula (delta + c) =>
  Rename.rename f (\lam v => liftFin v)
  \where {
    \private \func example {_ : Language} :
      liftFormula 2 (forAllH $ forAllH (equal #0 #1)) = {Formula 5}
      (forAllH $ forAllH $ equal #0 #1) => idp

    -- do the reverse. Works only if no 0 is free, as that cannot be mapped

    \func unliftFormula1 {_ : Language} {c : Context}
                         (f : Formula (suc c))
                         (h : Not (FreeInFormula f 0))
      : Formula c => Rename.renameFree f (renameFunction h)
      \where {
        \func renameFunction {_ : Language} {c : Context} {f : Formula (suc c)} (h : Not (FreeInFormula f 0)) : RenameFree (suc c) c f =>
          \lam (v : Fin (suc c)) free => \case \elim v, \elim free \with {
            | 0, free => absurd $ h free
            | suc v, _ => v
          }

        \func irrelevant {_ : Language} {c : Context} {f f' : Formula (suc c)}
                         {h : Not (FreeInFormula f 0)} {h' : Not (FreeInFormula f' 0)}
                         (p : f = f')
          : unliftFormula1 f h = unliftFormula1 f' h' \elim p
          | idp => pmap (unliftFormula1 f) ext
      }

    \func unliftLift {_ : Language} {c : Context} {f : Formula (suc c)} {g : Formula c}
                     (p : f = liftFormula 1 g) (h : Not (FreeInFormula f 0)) : g = unliftFormula1 f h
    \elim p
      | idp => inv (helper h)
      \where {
        \private \func helper {_ : Language} {c : Context} {g : Formula c}
                              (h : Not (FreeInFormula (Rename.rename g fsuc) 0))
          : Rename.renameFree (Rename.rename g fsuc) (unliftFormula1.renameFunction h) = g =>
            Rename.renameFree.composeWithRename *> Rename.renameFree.id (\lam _ _ => idp)
      }
  }