\import Data.Fin
\import Function
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import decidable.FormulaCode
\import decidable.TermCode
\import syntax.Context
\import syntax.Free
\import syntax.Syntax
\import syntax.lift.LiftTerm
\import util.ArrayUtil
\open Context
\open Nat (+)

\module Extend \where {
  \func extend {_ : Language} {c c' : Context} (remap : Rename c c') : Rename (inc c) (inc c') =>
    \lam v => \case v \with {
      | 0 => 0
      | suc f1 => fsuc $ remap f1
    }

  \func extends {_ : Language} {c c' : Context} (s : Substitution c c') : Substitution (inc c) (inc c') =>
    var 0 :: (\lam i => liftTerm {_} 1 (s i))
    \where {
      \func atSuc {_ : Language} {c c' : Context} (s : Substitution c c') {v : variable c}
        : extends s (fsuc v) = Rename.renameTerm (s v) fsuc => \peval liftTerm 1 (s v)
    }

  -- extending means addong an array to the left

  \func extendsN {_ : Language} {c c' : Context} (s : Substitution c c') (n : Nat) : Substitution (n + c) (n + c') \elim n
    | 0 => s
    | suc n => extendsN (var 0 :: (\lam v => Rename.renameTerm (s v) fsuc)) n

  \func extendFree {_ : Language} {c c' : Context} {f : Formula (inc c)}
                   (ctor : \Pi {d : Context} (Formula (suc d)) -> Formula d)
                   (r : RenameFree c c' (ctor f))
                   (freeInCtor : \Pi (v : Fin c) (FreeInFormula f (suc v)) -> FreeInFormula (ctor f) v)
    : RenameFree (inc c) (inc c') f => \lam v free => \case \elim v, \elim free \with {
    | 0, free => 0
    | suc f1, free => fsuc $ r f1 (freeInCtor f1 free)
  }
    \where {
      \func extend= {_ : Language} {c c' : Context} {f : Formula (inc c)}
                    (ctor : \Pi {d : Context} (Formula (suc d)) -> Formula d)
                    {r : Rename c c'}
                    (freeInCtor : \Pi (v : Fin c) (FreeInFormula f (suc v)) -> FreeInFormula (ctor f) v)
        : RenameFree.fromRename (Extend.extend r) = Extend.extendFree ctor (RenameFree.fromRename r) freeInCtor =>
        ext $ (\lam v free => \case \elim v, \elim free \with {
          | 0, free => idp
          | suc f1, free => idp
        })
    }
}

\func Rename {_ : Language} (c c' : Context) => variable c -> variable c'
  \where {
    \func renameTerm {_ : Language} {c c' : Context} (t : Term c) (remap : variable c -> variable c') : Term c'
    \elim t
      | var v => var $ remap v
      | apply f args => apply f (\lam i => renameTerm (args i) remap)
      \where {
        \func id {_ : Language} {c : Context} {t : Term c} {remap : variable c -> variable c} (h : \Pi (v : variable c) -> remap v = v)
          : renameTerm t remap = t
        \elim t
          | var v => pmap var $ h v
          | apply f1 args => pmap (apply f1) $ ext $ ext (\lam j => id {_} {c} {args j} {remap} h)

        \func compose {_ : Language} {c c' c'' : Context} {t : Term c}
                      {s : Rename c c'} {s' : Rename c' c''}
          : renameTerm (renameTerm t s) s' = renameTerm t (s' o s)
        \elim t
          | var v => idp
          | apply f args => pmap (apply f) $ ext $ ext (\lam j => compose {_} {c} {c'} {c''} {args j})
      }

    -- same as above but we additionally guarantee r is only applied on the free vars

    \func renameTermFree {_ : Language} {c c' : Context} (t : Term c) (remap : RenameFreeTerm c c' t) : Term c'
    \elim t
      | var v => var $ remap v idp
      | apply f args => apply f (\lam i => renameTermFree (args i) (\lam v free => remap v (inP (i, free))))
      \where {
        -- proof that renameTermFree works the same as renameTerm

        \func renameTerm= {_ : Language} {c c' : Context} {t : Term c} {r : Rename c c'} : renameTerm t r = renameTermFree t (RenameFreeTerm.fromRename r)
        \elim t
          | var v => idp
          | apply f args => pmap (apply f) $ ext $ ext (\lam j => renameTerm= {_} {c} {c'} {args j})

        \func composeWithRename {_ : Language} {c c' c'' : Context} {t : Term c} {r : Rename c c'}
                                {r' : RenameFreeTerm c' c'' (renameTerm t r)}
          : renameTermFree (renameTerm t r) r' = renameTermFree t (\lam v free => r' (r v) (freeInRenameTerm free))
        \elim t
          | var v => pmap var $ pmap (r' (r v)) $ ext
          | apply f args => pmap (apply f) $ ext $ ext (\lam j =>
              composeWithRename {_} {_} {_} {_} {args j}
          )

        \func composeWithRename' {_ : Language} {c c' c'' : Context} {t : Term c} {r : RenameFreeTerm c c' t}
                                {r' : variable c' -> variable c''}
          : renameTerm (renameTermFree t r) r' = renameTermFree t (\lam v free => r' (r v free))
        \elim t
          | var v => idp
          | apply f args => pmap (apply f) $ ext $ ext (\lam j =>
              composeWithRename' {_} {_} {_} {_} {args j}
          )

        \func id {_ : Language} {c : Context} {t : Term c} {r : RenameFreeTerm c c t}
          (h : \Pi (v : variable c) (free : FreeInTerm t v) -> r v free = v)
                 : renameTermFree t r = t
                 \elim t
                   | var v => pmap var $ h v idp
                   | apply f args => pmap (apply f) $ ext $ ext (\lam j => id {_} {c} {args j} (\lam v free => h v (inP (j, free))))
      }

    \func rename {_ : Language} {c c' : Context} (f : Formula c) (r : Rename c c') : Formula c'
    \elim f
      | equal a b => equal (renameTerm a r) (renameTerm b r)
      | atomic rel terms => atomic rel $ \lam i => renameTerm (terms i) r
      | notH f => notH $ rename f r
      | impH antecedent consequent => impH (rename antecedent r) (rename consequent r)
      | cAnd a b => cAnd (rename a r) (rename b r)
      | forAllH f => forAllH $ rename f (Extend.extend r)
      | cExists f => cExists $ rename f (Extend.extend r)

    -- same as above but we additionally guarantee r is only applied on the free vars

    \func renameFree {_ : Language} {c c' : Context} (f : Formula c) (r : RenameFree c c' f) : Formula c'
    \elim f
      | equal a b => equal (renameTermFree a (\lam v free => r v (byLeft free))) (renameTermFree b (\lam v free => r v (byRight free)))
      | atomic rel terms => atomic rel $ \lam i => renameTermFree (terms i) (\lam v free => r v (inP (i, free)))
      | notH f => notH $ renameFree f r
      | impH antecedent consequent => impH (renameFree antecedent (\lam v free => r v (byLeft free))) (renameFree consequent (\lam v free => r v (byRight free)))
      | cAnd a b => cAnd (renameFree a (\lam v free => r v (byLeft free))) (renameFree b (\lam v free => r v (byRight free)))
      | forAllH f => forAllH $ renameFree f (Extend.extendFree forAllH r (\lam _ f1 => f1))
      | cExists f => cExists $ renameFree f (Extend.extendFree cExists r (\lam _ f1 => f1))
      \where {
        -- proof that renameFree works the same as rename

        \func rename= {_ : Language} {c c' : Context} {f : Formula c} {r : Rename c c'} : rename f r = renameFree f (RenameFree.fromRename r)
        \elim f
          | equal a b => pmap2 equal renameTermFree.renameTerm= renameTermFree.renameTerm=
          | atomic r1 terms => pmap (atomic r1) $ ext $ ext (\lam _ => renameTermFree.renameTerm=)
          | notH f => pmap notH rename=
          | impH a f => pmap2 impH rename= rename=
          | cAnd a f => pmap2 cAnd rename= rename=
          | forAllH f => pmap forAllH (rename= *> pmap (renameFree f) (Extend.extendFree.extend= forAllH (\lam _ f1 => f1)))
          | cExists f => pmap cExists (rename= *> pmap (renameFree f) (Extend.extendFree.extend= cExists (\lam _ f1 => f1)))

        \func composeWithRename {_ : Language} {c c' c'' : Context} {f : Formula c} {r : Rename c c'}
                                {r' : RenameFree c' c'' (rename f r)}
          : renameFree (rename f r) r' = renameFree f (\lam v free => r' (r v) (freeInRename free))
        \elim f
          | equal a b => pmap2 equal renameTermFree.composeWithRename renameTermFree.composeWithRename
          | atomic r1 terms => pmap (atomic r1) $ ext $ ext (\lam _ =>
              renameTermFree.composeWithRename
          )
          | notH f => pmap notH composeWithRename
          | impH a f => pmap2 impH composeWithRename composeWithRename
          | cAnd a f => pmap2 cAnd composeWithRename composeWithRename
          | forAllH f => pmap forAllH $ composeWithRename *> pmap (renameFree f)
                                                                 (ext (\lam v free => \case \elim v, \elim free \with {
                                                                   | 0, free => idp
                                                                   | suc f1, free => idp
                                                                 }))
          | cExists f => pmap cExists $ composeWithRename *> pmap (renameFree f)
                                                                 (ext (\lam v free => \case \elim v, \elim free \with {
                                                                   | 0, free => idp
                                                                   | suc f1, free => idp
                                                                 }))

        \func composeWithRename' {_ : Language} {c c' c'' : Context} {f : Formula c} {r : RenameFree c c' f}
                                {r' : Rename c' c''}
          : rename (renameFree f r) r' = renameFree f (\lam v free => r' (r v free))
          \elim f
            | equal a b => pmap2 equal renameTermFree.composeWithRename' renameTermFree.composeWithRename'
            | atomic r1 terms => pmap (atomic r1) $ ext $ ext (\lam _ =>
                renameTermFree.composeWithRename'
            )
            | notH f => pmap notH composeWithRename'
            | impH a f => pmap2 impH composeWithRename' composeWithRename'
            | cAnd a f => pmap2 cAnd composeWithRename' composeWithRename'
            | forAllH f => pmap forAllH $ composeWithRename' *> pmap (renameFree f)
                                                                   (ext (\lam v free => \case \elim v, \elim free \with {
                                                                     | 0, free => idp
                                                                     | suc f1, free => idp
                                                                   }))
            | cExists f => pmap cExists $ composeWithRename' *> pmap (renameFree f)
                                                                   (ext (\lam v free => \case \elim v, \elim free \with {
                                                                     | 0, free => idp
                                                                     | suc f1, free => idp
                                                                   }))

        \func id {_ : Language} {c : Context} {f : Formula c} {r : RenameFree c c f}
          (h : \Pi (v : variable c) (free : FreeInFormula f v) -> r v free = v)
          : renameFree f r = f
          \elim f
            | equal a b => pmap2 equal
                (renameTermFree.id (\lam v free => h v (byLeft free)))
                (renameTermFree.id (\lam v free => h v (byRight free)))
            | atomic r1 terms => pmap (atomic r1) (ext $ ext (\lam j => renameTermFree.id (\lam v free => h v (inP (j, free)))))
            | notH f => pmap notH (id h)
            | impH a f => pmap2 impH (id (\lam v free => h v (byLeft free))) (id (\lam v free => h v (byRight free)))
            | cAnd a f => pmap2 cAnd (id (\lam v free => h v (byLeft free))) (id (\lam v free => h v (byRight free)))
            | forAllH f => pmap forAllH (id (\lam (v : variable (suc c)) free => \case \elim v, \elim free \with {
              | 0, free => idp
              | suc v, free => pmap fsuc (h v free)
            }))
            | cExists f => pmap cExists (id (\lam (v : variable (suc c)) free => \case \elim v, \elim free \with {
              | 0, free => idp
              | suc v, free => pmap fsuc (h v free)
            }))
      }

    \func unrenameTerm {_ : Language} {c c' : Context} {t t' : Term c} {r : Rename c c'}
                       (rInj : \Pi {v v' : variable c} (r v = r v') -> v = v')
                       (p : renameTerm t r = renameTerm t' r) : t = t'
    \elim t, t', p
      | var v, var v1, p => \let p' => TermCodeDec.termCode-encode p \in pmap var $ rInj p'
      | apply f args, apply f1 args1, p =>
        \let
          | (p1, p2) => TermCodeDec.termCode-encode p
        \in \case \elim f1, \elim args1, p1, p2 \with {
          | _, args1, idp, p2 => pmap
              (apply f)
              (ext $ ext (\lam j => \let p2' => convertArrayEquality p2 | p2Result => pmap (\lam (z : Array _ _) => z j) p2' \in unrenameTerm rInj p2Result))
        }

    \func unrename {_ : Language} {c c' : Context} {f f' : Formula c} {r : Rename c c'}
                   (rInj : \Pi {v v' : variable c} (r v = r v') -> v = v')
                   (p : rename f r = rename f' r) : f = f'
    \elim f, f', p
      | equal a b, equal a1 b1, p => \let (p1, p2) => FormulaCodeDec.formulaCode-encode p \in
        pmap2 equal (unrenameTerm rInj p1) (unrenameTerm rInj p2)
      | atomic r1 terms, atomic r2 terms1, p =>
        \let
          | (p1, p2) => FormulaCodeDec.formulaCode-encode p
        \in \case \elim r2, \elim terms1, p1, p2 \with {
          | _, _, idp, p2 => pmap
              (atomic r1)
              (ext $ ext (\lam j => \let p2' => convertArrayEquality p2 | p2Result => pmap (\lam (z : Array _ _) => z j) p2' \in unrenameTerm rInj p2Result))
        }
      | notH f, notH f', p =>
        \let p' => FormulaCodeDec.formulaCode-decode $ FormulaCodeDec.formulaCode-encode p
        \in pmap notH $ unrename rInj p'
      | impH a f, impH a1 f', p =>
        \let
          | (p1, p2) => FormulaCodeDec.formulaCode-encode p
          | p1' => FormulaCodeDec.formulaCode-decode p1
          | p2' => FormulaCodeDec.formulaCode-decode p2
        \in pmap2 impH (unrename rInj p1') (unrename rInj p2')
      | cAnd a f, cAnd a1 f', p =>
        \let
          | (p1, p2) => FormulaCodeDec.formulaCode-encode p
          | p1' => FormulaCodeDec.formulaCode-decode p1
          | p2' => FormulaCodeDec.formulaCode-decode p2
        \in pmap2 cAnd (unrename rInj p1') (unrename rInj p2')
      | forAllH f, forAllH f', p =>
        \let
          | p' => FormulaCodeDec.formulaCode-decode $ FormulaCodeDec.formulaCode-encode p
        \in pmap forAllH (unrename (\lam {v : variable (suc c)} {v' : variable (suc c)} p => \case \elim v, \elim v', \elim p \with {
          | 0, 0, p => idp
          | 0, suc f1, p => \let p : 0 = suc _ => p \in usingOnly p contradiction
          | suc f1, 0, p => \let p : suc _ = 0 => p \in usingOnly p contradiction
          | suc f1, suc f2, p => \let p' => unfsuc p \in pmap fsuc (rInj p')
        }) p')
      | cExists f, cExists f', p =>
        \let
          | p' => FormulaCodeDec.formulaCode-decode $ FormulaCodeDec.formulaCode-encode p
        \in pmap cExists (unrename (\lam {v : variable (suc c)} {v' : variable (suc c)} p => \case \elim v, \elim v', \elim p \with {
          | 0, 0, p => idp
          | 0, suc f1, p => \let p : 0 = suc _ => p \in usingOnly p contradiction
          | suc f1, 0, p => \let p : suc _ = 0 => p \in usingOnly p contradiction
          | suc f1, suc f2, p => \let p' => unfsuc p \in pmap fsuc (rInj p')
        }) p')
  }

\func Substitution {_ : Language} (c c' : Context) => variable c -> Term c'
  \where {
    \func substituteTerm {_ : Language} {c c' : Context} (t : Term c) (s : Substitution c c') : Term c'
    \elim t
      | var v => s v
      | apply f args => apply f $ \lam i => substituteTerm (args i) s
      \where {
        \func id {_ : Language} {c : Context} {t : Term c} : substituteTerm t var = t
        \elim t
          | var v => idp
          | apply f args => pmap (apply f) (ext $ ext $ (\lam j => id {_} {c} {args j}))

        \func compose {_ : Language} {c c' c'' : Context} {t : Term c}
                      {s : Substitution c c'} {s' : Substitution c' c''}
          : substituteTerm (substituteTerm t s) s' = substituteTerm t (\lam v => substituteTerm (s v) s')
        \elim t
          | var v => idp
          | apply f args => pmap (apply f) (ext $ ext (\lam j => compose {_} {_} {_} {_} {args j}))
      }

    -- TODO: this proof seems very complicated. What is the general principle?

    \func distributeExtends {_ : Language} {c c' c'' : Context} {s : Substitution c c'} {s' : Substitution c' c''} :
      (\lam v => substituteTerm (Extend.extends s v) (Extend.extends s')) = {Substitution (suc c) (suc c'')}
      Extend.extends (\lam v => substituteTerm (s v) s') => ext (helper s s')
      \where {
        \private \func helper {_ : Language} {c c' c'' : Context} (s : Substitution c c') (s' : Substitution c' c'')
                              (v : variable (suc c)) :
          substituteTerm (Extend.extends s v) (Extend.extends s') = Extend.extends (\lam v' => substituteTerm (s v') s') v
        \elim v
          | 0 => idp
          | suc f => run {
            rewrite (Extend.extends.atSuc s),
            rewrite (Extend.extends.atSuc (\lam v' => substituteTerm (s v') s' )),
            helper2 (s f) s'
          }

        \private \func helper2 {_ : Language} {c' c'' : Context} (t : Term c') (s' : Substitution c' c'') :
          substituteTerm (Rename.renameTerm t fsuc) (Extend.extends s') = Rename.renameTerm (substituteTerm t s') fsuc
        \elim t
          | var v => \peval liftTerm 1 _
          | apply f args => pmap (apply f) (ext $ ext (\lam j => helper2 (args j) s'))
      }

    \func substitute {_ : Language} {c c' : Context} (f : Formula c) (s : Substitution c c') : Formula c'
    \elim f
      | equal a b => equal (substituteTerm a s) (substituteTerm b s)
      | atomic r terms => atomic r $ \lam i => substituteTerm (terms i) s
      | notH f => notH $ substitute f s
      | impH antecedent consequent => impH (substitute antecedent s) (substitute consequent s)
      | cAnd a b => cAnd (substitute a s) (substitute b s)
      | forAllH f => forAllH $ substitute f (Extend.extends s)
      | cExists f => cExists $ substitute f (Extend.extends s)
      \where {
        \func compose {_ : Language} {c c' c'' : Context} {f : Formula c}
                      {s : Substitution c c'} {s' : Substitution c' c''}
          : substitute (substitute f s) s' = substitute f (\lam v => substituteTerm (s v) s')
        \elim f
          | equal a b => pmap2 equal substituteTerm.compose substituteTerm.compose
          | atomic r terms => pmap (atomic r) (ext (ext (\lam _ => substituteTerm.compose)))
          | notH f => pmap notH compose
          | impH a f => pmap2 impH compose compose
          | cAnd a f => pmap2 cAnd compose compose
          | forAllH f => pmap forAllH (compose *> pmap (substitute f) distributeExtends)
          | cExists f => pmap cExists (compose *> pmap (substitute f) distributeExtends)
      }

    \func subst {_ : Language} {c : Context} (f : Formula (inc c)) (t : Term c) : Formula c =>
      substitute f (substOne t)

    \func substOne {_ : Language} {c : Context} (t : Term c) (v : variable (Context.inc c)) : Term c \elim v
      | 0 => t
      | suc v => var v
  }

\module SubstituteExtensions \where {
  \open FormulaExtensions
  \open Substitution

  \func substituteOrH' {_ : Language} {c c' : Context} {a : Array (Formula c)} {s : Substitution c c'} :
    substitute (orH' a) s = orH' (\new DArray {
      | len => a.len
      | at j => substitute (a.at j) s
    }) \elim a
    | nil => rewrite (\peval orH' nil, \peval orH' (\new Array (Formula c') 0 (\lam _ => substitute trueH s))) idp
    | a :: l => rewrite (
      \peval orH' (a :: l),
      \peval orH' (\new Array (Formula c') (suc (DArray.len {l})) (\lam j => substitute ((::) a l j) s)),
      substituteOrH'
    ) $ idp

  \func subsituteCExists' {_ : Language} {c c' : Context} {n : Nat} {f : Formula (n + c)} {s : Substitution c c'} :
    substitute (cExists' n f) s = cExists' n (substitute f $ Extend.extendsN s n)
  \elim n
    | 0 => rewrite (\peval cExists' 0 f, \peval cExists' 0 _) idp
    | suc n => run {
      transport
          (\lam z => substitute z s = cExists' (suc n) (substitute f (Extend.extendsN (var 0 :: \new Array (Term (suc c')) c (\lam (v : Fin c) => Rename.renameTerm (s v) fsuc)) n)))
          (inv $ \peval cExists' (suc n) f),
      transport
          (\lam z => cExists (substitute (cExists' n f) (Extend.extends s)) = z)
          (inv $ \peval cExists' (suc n) _),
      pmap cExists,
      (*>) subsituteCExists',
      pmap (cExists' n),
      pmap (substitute f),
      pmap (Extend.extendsN __ n),
      ext,
      \lam i => \case \elim i \with {
        | 0 => idp
        | suc i => \peval liftTerm _ _
      }
    }
}