\import Data.Fin
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import syntax.Context
\import syntax.Free
\import syntax.Substitution
\import syntax.SubstitutionReverse
\import syntax.Syntax
\import util.SetUtil
\open Nat (+)

-- adds extra context to the end
-- so if the term uses the variables x0 x1 x2 and we lift by 3, then the context becomes x0 x1 x2 y0 y1 y2
-- and the term uses the correct variables, i.e. at the bottom x2 goes from 0 to 3

-- lifting a fin from n to m corresponds to expand-fin-right delta

\private \func liftFin {delta n : Nat} (i : Fin n) : Fin (delta + n)
\elim delta
  | 0 => i
  | suc delta => fsuc $ liftFin i
  \where {
    \private \func isActuallyJustAddition {delta n : Nat} {i : Fin n} : liftFin {delta} i = {Nat} delta + i
    \elim delta
      | 0 => idp
      | suc delta => pmap suc isActuallyJustAddition

    \func unliftFinPath {delta n : Nat} {i j : Fin n} (p : liftFin i = {Fin (delta + n)} liftFin j) : i = j
    \elim delta
      | 0 => p
      | suc delta => \let p' => unfsuc p \in unliftFinPath p'
  }

\func liftTerm {_ : Language} {delta c : Context} (t : Term c) : Term (delta + c) =>
  Rename.renameTerm t (liftFin __)
  \where {
    \func liftTerm0 {_ : Language} {c : Context} {t : Term c} : liftTerm {_} {0} t = t =>
      unfold liftTerm (Rename.renameTerm.id (\lam _ => idp))

    \func liftTerm1 {_ : Language} {c : Context} {t : Term c} : liftTerm {_} {1} t = Rename.renameTerm t fsuc => idp

    \func compose1 {_ : Language} {c m : Context} {t : Term c}
      : liftTerm {_} {1} {m + c} (liftTerm {_} {m} {c} t) = liftTerm {_} {suc m} {c} t =>
      unfold liftTerm Rename.renameTerm.compose

    \func unliftTerm1 {_ : Language} {c : Context} (t : Term (suc c)) (h : Not (FreeinTerm t 0))
      : Term c => Rename.renameTermFree t (\lam (v : Fin (suc c)) free => \case \elim v, \elim free \with {
      | 0, free => absurd $ h free
      | suc v, _ => v
    })

    \func unliftLift1Term {_ : Language} {c : Context}
                          {t : Term c}
                          (h : Not (FreeinTerm (liftTerm {_} {1} t) 0))
      : unliftTerm1 (liftTerm {_} {1} t) h = {Term c} t
    \elim t
      | var v => idp
      | apply f args => pmap (apply f) $ ext $ ext (\lam j =>
          \let foo => unfold (unliftTerm1, liftTerm) in unliftLift1Term {_} {c} {args j} notFreeInLiftTerm
            -- h and notFreeInLiftTerm are essentially the same
          \in pmap (Rename.renameTermFree (Rename.renameTerm (args j) fsuc)) (ext (\lam v free => \case \elim v, \elim free \with {
            | 0, free => idp
            | suc f1, free => idp
          }))
            *> foo
      )
  }

\sfunc liftFormula {_ : Language} (delta : Context) {c : Context} (f : Formula c) : Formula (delta + c) =>
  Rename.rename f (\lam v => liftFin v)
  \where {
    \private \func example {_ : Language} :
      liftFormula 2 (forAllH $ forAllH (equal #0 #1)) = {Formula 5}
      (forAllH $ forAllH $ equal #0 #1) => \peval liftFormula _ _

    -- do the reverse. Works only if no 0 is free, as that cannot be mapped

    \func unliftFormula1 {_ : Language} {c : Context}
                         (f : Formula (suc c))
                         (h : Not (FreeInFormula f 0))
      : Formula c => Rename.renameFree f (\lam (v : Fin (suc c)) free => \case \elim v, \elim free \with {
      | 0, free => absurd $ h free
      | suc v, _ => v
    })

    \func unliftFormula1Path {_ : Language} {c : Context}
                             {f f' : Formula (suc c)}
                             (p : f = f')
                             (h' : Not (FreeInFormula f' 0))
      : unliftFormula1 f (rewrite p h') = unliftFormula1 f' h' \elim p
      | idp => idp

    \func liftUnlift1 {_ : Language} {c : Context}
                      {f : Formula (suc c)} (h : Not (FreeInFormula f 0))
      : liftFormula 1 (unliftFormula1 f h) = f =>
      {?}

    \func unliftLift1 {_ : Language} {c : Context}
                      {f : Formula c}
      : unliftFormula1 (liftFormula 1 f) notFreeInLift = {Formula c} f \elim f
      -- TODO : cleanup
      | equal a b => unfold (unliftFormula1, \peval liftFormula 1 _) $ pmap2 equal
                                                                (
                                                                  \let foo => unfold (liftTerm.unliftTerm1, liftTerm) in liftTerm.unliftLift1Term {_} {c} {a} notFreeInLiftTerm
                                                                  \in pmap (Rename.renameTermFree (Rename.renameTerm a fsuc)) (ext (\lam v free => \case \elim v, \elim free \with {
                                                                    | 0, free => idp
                                                                    | suc f1, free => idp
                                                                  })) *> foo)
                                                                (
                                                                  \let foo => unfold (liftTerm.unliftTerm1, liftTerm) in liftTerm.unliftLift1Term {_} {c} {b} notFreeInLiftTerm
                                                                  \in pmap (Rename.renameTermFree (Rename.renameTerm b fsuc)) (ext (\lam v free => \case \elim v, \elim free \with {
                                                                    | 0, free => idp
                                                                    | suc f1, free => idp
                                                                  })) *> foo)
      | atomic r terms => pmap (atomic r) $ ext $ ext (\lam j =>
          \let foo => liftTerm.unliftLift1Term {_} {c} {terms j} notFreeInLiftTerm
          \in pmap (Rename.renameTermFree (Rename.renameTerm (terms j) fsuc)) (ext (\lam v free => \case \elim v, \elim free \with {
            | 0, free => idp
            | suc f1, free => idp
          })) *> foo)
      | notH f1 => pmap notH unliftLift1
      | impH a f1 => pmap2 impH (helper (\lam _ => idp) (\lam _ _ => idp) *> unliftLift1) (helper (\lam _ => idp) (\lam _ _ => idp) *> unliftLift1)
      | cAnd a f1 => pmap2 cAnd (helper (\lam _ => idp) (\lam _ _ => idp) *> unliftLift1) (helper (\lam _ => idp) (\lam _ _ => idp) *> unliftLift1)
      | forAllH f =>
        \let
        | goal : unliftFormula1 (liftFormula 1 (forAllH f)) {?} = {Formula c} f => {?}
        \in {?}
      | cExists f1 => {?}
      \where {
        \func helper {_ : Language} {c c' : Context} {f : Formula (suc c)}
                     {x1 x2 : RenameFree (suc c) c' f}
                     (h1 : \Pi (free : FreeInFormula f 0) -> x1 0 free = x2 0 free)
                     (h2 : \Pi (v : Fin c) (free : FreeInFormula f (suc v)) -> x1 (suc v) free = x2 (suc v) free)
          : Rename.renameFree f x1 = Rename.renameFree f x2 =>
          pmap (Rename.renameFree f) $ ext (\lam v free => \case \elim v, \elim free \with {
            | 0, free => h1 free
            | suc f1, free => h2 f1 free
          })
      }

    \func unliftPath {_ : Language} (delta : Context) {c : Context} {f f' : Formula c} (p : liftFormula delta f = liftFormula delta f')
      : f = f' => Rename.unrename liftFin.unliftFinPath p
  }

-- TODO replace with unlift?

\func reverseLift {_ : Language} {c : Context} {f : Formula c} (dummy : Term c)
  : Substitution.substitute (liftFormula 1 f) (reverse1S dummy) = f =>
  reverseRename (\lam v => liftFin {1} v) (reverse1S dummy) (\lam _ => reverseTerm)
  \where {
    \func reverse1S {_ : Language} {c : Context} (dummy : Term c) : Substitution (suc c) c =>
      \lam v => \case \elim v \with {
        | 0 => dummy
        | suc v => var v
      }

    \func reverseTerm  {_ : Language} {c : Context} {t dummy : Term c} :
      Substitution.substituteTerm (Rename.renameTerm t fsuc) (reverse1S dummy) = t
    \elim t
      | var v => idp
      | apply f args => pmap (apply f) (ext $ ext (\lam j => reverseTerm {_} {c} {args j}))
  }

\func liftTheory {_ : Language} {delta c : Context} (T : Theory c) : Theory (delta + c) =>
  mapSet T (\lam f _ => liftFormula delta f)

\func subsituteLiftTerm1S {_ : Language} {c c' : Context} {t : Term c} {s : Substitution (suc c) c'}
  : Substitution.substituteTerm (liftTerm {_} {1} t) s = Substitution.substituteTerm t (\lam v => s (fsuc v))
\elim t
  | var v => idp
  | apply f args => pmap (apply f) (ext $ ext $ (\lam j => subsituteLiftTerm1S {_} {c} {c'} {args j}))

\func subsituteLiftTerm1 {_ : Language} {c : Context} {t t' : Term c}
  : Substitution.substituteTerm (liftTerm {_} {1} t) (Substitution.substOne t') = t =>
  subsituteLiftTerm1S *> Substitution.substituteTerm.id

\func subsituteLiftTerm1' {_ : Language} {c : Context} {t t' : Term c}
  : Substitution.substituteTerm (Rename.renameTerm t fsuc) (Substitution.substOne t') = t => subsituteLiftTerm1

-- pad is the opposite of lift, instead of adding context at the end and thus increasing
-- the existing, pad adds prior past context to the start and thus does nothing akin
-- to expand-fin-left

\func padFin {delta n : Nat} (i : Fin n) : Fin (n + delta)
\elim n, i
  | suc n, 0 => 0
  | suc n, suc i => fsuc $ padFin i
