\import Data.Fin
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths.Meta
\import syntax.Context
\import syntax.Substitution
\import syntax.Syntax
\import syntax.lift.Lift
\import syntax.lift.LiftFormula
\import syntax.lift.LiftTerm
\import util.SetUtil
\open Context (variable)

\func FreeInTerm {_ : Language} {c : Context} (t : Term c) (v : variable c) : \Prop
\elim t
  | var v1 => v = v1
  | apply f args => ∃ (j : Fin (funArity f)) (FreeInTerm (args j) v)

\func FreeInFormula {_ : Language} {c : Context} (f : Formula c) (v : variable c) : \Prop
\elim f
  | equal a b => FreeInTerm a v || FreeInTerm b v
  | atomic r terms => ∃ (j : Fin (relArity r)) (FreeInTerm (terms j) v)
  | notH f => FreeInFormula f v
  | impH a f => FreeInFormula a v || FreeInFormula f v
  | cAnd a f => FreeInFormula a v || FreeInFormula f v
  | forAllH f => FreeInFormula f (suc v)
  | cExists f => FreeInFormula f (suc v)

-- variables that are free before renaming are also free afterwards (when remapped)

\func freeInRenameTerm {_ : Language} {c c' : Context} {t : Term c}
                       {r : Rename c c'}
                       {v : variable c}
                       (h : FreeInTerm t v)
  : FreeInTerm (Rename.renameTerm t r) (r v)
\elim t, h
  | var v', idp => idp
  | apply f args, inP (j, h) => inP (j, freeInRenameTerm h)

-- if a variable is not mapped to during renaming then it cannot be free afterwards

\func notFreeInRenameTerm {_ : Language} {c c' : Context} {t : Term c} {r : Rename c c'}
                          {v : variable c'}
                          (h' : \Pi (v' : variable c) -> v /= r v')
                          (h : FreeInTerm (Rename.renameTerm t r) v)
  : Empty
\elim t, h
  | var v1, idp => h' v1 idp
  | apply f args, inP (j, free) => notFreeInRenameTerm h' free

\func freeInRename {_ : Language} {c c' : Context} {f : Formula c}
                       {r : Rename c c'}
                       {v : variable c}
                       (h : FreeInFormula f v)
  : FreeInFormula (Rename.rename f r) (r v)
  \elim f, h
    | equal a b, byLeft h => byLeft $ freeInRenameTerm h
    | equal a b, byRight h => byRight $ freeInRenameTerm h
    | atomic r1 terms, inP (j, h) => inP (j, freeInRenameTerm h)
    | notH f, h => freeInRename h
    | impH a f, byLeft h => byLeft (freeInRename h)
    | impH a f, byRight h => byRight (freeInRename h)
    | cAnd a f, byLeft h => byLeft (freeInRename h)
    | cAnd a f, byRight h => byRight (freeInRename h)
    | forAllH f, h => freeInRename h
    | cExists f, h => freeInRename h

\func notFreeInRename {_ : Language} {c c' : Context} {f : Formula c} {r : Rename c c'}
                      {v : variable c'}
                      (h' : \Pi (v' : variable c) -> v /= r v')
                      (h : FreeInFormula (Rename.rename f r) v)
  : Empty
\elim f, h
  | equal a b, byLeft a1 => notFreeInRenameTerm h' a1
  | equal a b, byRight b1 => notFreeInRenameTerm h' b1
  | atomic r1 terms, inP (j, free) => notFreeInRenameTerm h' free
  | notH f, h => notFreeInRename h' h
  | impH a f, byLeft a1 => notFreeInRename h' a1
  | impH a f, byRight b => notFreeInRename h' b
  | cAnd a f, byLeft a1 => notFreeInRename h' a1
  | cAnd a f, byRight b => notFreeInRename h' b
  | forAllH f, h => notFreeInRename (\lam (v' : Fin (suc c)) p => \case \elim v', \elim p \with {
    | 0, p => \let p' : suc v = 0 => p \in usingOnly p' contradiction
    | suc v', p => h' v' (unfsuc p)
  }) h
  | cExists f, h => notFreeInRename (\lam (v' : Fin (suc c)) p => \case \elim v', \elim p \with {
    | 0, p => \let p' : suc v = 0 => p \in usingOnly p' contradiction
    | suc v', p => h' v' (unfsuc p)
  }) h

\func notFreeInLiftTerm {_ : Language} {c : Context} {t : Term c}
                        (h : FreeInTerm (liftTerm {_} 1 t) 0) : Empty =>
  notFreeInRenameTerm (\lam v' (p : 0 = {Fin (suc c)} suc v') => usingOnly p contradiction)
      (rewrite (\peval liftTerm 1 t) in h)

\func notFreeInLift {_ : Language} {c : Context} {f : Formula c}
                    (h : FreeInFormula (liftFormula 1 f) 0)
  : Empty => notFreeInRename
    (\lam v' (p : 0 = {Fin (suc c)} suc v') => usingOnly p contradiction)
    h
\where {
  \func fromLiftTheory {_ : Language} {c : Context} {f : Formula (suc c)} {T : Theory c}
    (hEl : f ∈ liftTheory {_} {1} T) (h : FreeInFormula f 0) : Empty \elim hEl
    | inP (x,e,idp) => notFreeInLift h
}

\func RenameFreeTerm {_ : Language} (c c' : Context) (t : Term c) =>
  \Pi (v : variable c) (FreeInTerm t v) -> variable c'
  \where {
    \func fromRename {_ : Language} {c c' : Context} (r : Rename c c') {t : Term c} : RenameFreeTerm c c' t =>
      \lam v _ => r v
  }

\func RenameFree {_ : Language} (c c' : Context) (f : Formula c) =>
  \Pi (v : variable c) (FreeInFormula f v) -> variable c'
  \where {
    \func fromRename {_ : Language} {c c' : Context} (r : Rename c c') {f : Formula c} : RenameFree c c' f =>
      \lam v _ => r v
  }
