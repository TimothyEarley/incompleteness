\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import proof.Proof
\import semantics.Interpretation
\import syntax.Context
\import syntax.Syntax
\import util.ArrayUtil
\import util.LogicUtil
\open Interpretation (⊧, ⊧I)

\class TermCongruence \extends Equivalence
  | L : Language
  | c : Context
  | A => Term c
  | T : Theory c

  | congFun : \Pi (f : L.Functions) (args args' : Array (Term c) (L.funArity f))
                  (\Pi (i : Fin (L.funArity f)) -> args i ~ args' i)
  -> apply f args ~ apply f args'
  | congRel : \Pi (r : L.Relations) (args args' : Array (Term c) (L.relArity r))
                  (\Pi (i : Fin (L.relArity r)) -> args' i ~ args i)
                  (Prf T (atomic r args))
  -> Prf' T (atomic r args')

\func ProvableEqualCongruence  {_ : Language} {c : Context} (T : Theory c) : TermCongruence \cowith
  | L => _
  | c => c
  | T => T

  | ~ t1 t2 => Prf' T (equal t1 t2)

  | ~-symmetric => \case \elim __ \with {
    | inP a => inP (symm a)
  }
  | ~-transitive => \case \elim __, \elim __ \with {
    | inP a, inP a1 => inP (trans a a1)
  }
  | ~-reflexive => inP (refl idp)
  | congFun f _ _ h => \case truncPArray {funArity f} h \with {
    | inP h' => inP (fcong h' idp idp)
  }
  | congRel r _ _ h prf => \case truncPArray {relArity r} h \with {
    | inP h' => inP (rcong h' prf)
  }