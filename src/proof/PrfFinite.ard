\import Data.Fin
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import Set
\import Set.Fin
\import Set.Subset
\import decidable.DecLanguage
\import decidable.FormulaCode
\import proof.PrfWeaken
\import proof.Proof
\import syntax.Context
\import syntax.Free
\import syntax.Substitution
\import syntax.Syntax
\import syntax.lift.Lift
\import syntax.lift.LiftFormula
\import util.SetUtil

\func prfFinite {_ : DecLanguage} {c : Context} {axioms : Theory c} {toShow : Formula c}
                (prf : Prf axioms toShow) :
  \Sigma
    (axioms' : Theory c)
    (axioms' ⊆ axioms)
    (FinSet (Elements axioms'))
    (Prf axioms' toShow)
\elim prf
  | AXM e => (single toShow, SubsetHelper.subsetSingle e, FinSets.FinSingle, AXM idp)
  | contra f prf1 prf2 =>
    \let
      | h1 => prfFinite prf1
      | h2 => prfFinite prf2
    \in (
      h1.1 ∪ h2.1,
      SubsetHelper.subsetUnion h1.2 h2.2,
      FinSets.FinUnion h1.3 h2.3,
      contra f (prfWeaken h1.4 (\lam h => byLeft h)) (prfWeaken h2.4 (\lam h => byRight h))
    )
  | forAllElim f prfAll t prf =>
    \let
      | h' => prfFinite prfAll
      | h => prfFinite prf
      -- h.1 could have (subst f t) in it. Thats needs to be removed
      | axiomsH => delete h.1 (Substitution.subst f t)
      | axiomsHSub : axiomsH ⊆ axioms => \lam (e1, e2) => \case h.2 e1 \with {
        | byLeft a => a
        | byRight b => absurd $ e2 b
      }
      | axiomsHFin : FinSet (Elements axiomsH) => FinSets.FinWithout h.3 (decideEq _)
    \in (
      h'.1 ∪ axiomsH,
      SubsetHelper.subsetUnion h'.2 axiomsHSub,
      FinSets.FinUnion h'.3 axiomsHFin,
      forAllElim f (prfWeaken h'.4 (byLeft __)) t (prfWeaken h.4 (\lam {f'} e => \case decideEq (Substitution.subst f t) f' \with {
        | yes p => byRight p
        | no n => byLeft (byRight (e, n))
      }))
    )
  | introImp {a} prf p =>
    \let
      | h => prfFinite prf
      -- we could have used a, so remove it
    \in (
      delete h.1 a,
      SubsetHelper.subsetDelete h.2,
      FinSets.FinWithout h.3 (decideEq _),
      introImp (prfWeaken h.4 SubsetHelper.addDelete) p
    )
  | refl p p' => (∅, SubsetHelper.emptySubset, FinSets.FinEmpty, refl p p')
  | notImp prf1 prf2 p =>
    \let
      | h1 => prfFinite prf1
      | h2 => prfFinite prf2
    \in (
      h1.1 ∪ h2.1,
      SubsetHelper.subsetUnion h1.2 h2.2,
      FinSets.FinUnion h1.3 h2.3,
      notImp (prfWeaken h1.4 (byLeft __)) (prfWeaken h2.4 (byRight __)) p
    )
  | notFalse p => (∅, SubsetHelper.emptySubset, FinSets.FinEmpty, notFalse p)
  | notEqual h p => (∅, SubsetHelper.emptySubset, FinSets.FinEmpty, notEqual h p)
  | notEqualSymm prf p =>
    \let
      | h => prfFinite prf
    \in (h.1, h.2, h.3, notEqualSymm h.4 p)
  | notHFromimpH f' prf1 prf2 p =>
    \let
      | h1 => prfFinite prf1
      | h2 => prfFinite prf2
    \in (
      h1.1 ∪ h2.1,
      SubsetHelper.subsetUnion h1.2 h2.2,
      FinSets.FinUnion h1.3 h2.3,
      notHFromimpH f' (prfWeaken h1.4 (byLeft __)) (prfWeaken h2.4 (byRight __)) p
    )
  | sub f t t' prf1 prf2 idp =>
    \let
      | h1 => prfFinite prf1
      | h2 => prfFinite prf2
    \in (
      h1.1 ∪ h2.1,
      SubsetHelper.subsetUnion h1.2 h2.2,
      FinSets.FinUnion h1.3 h2.3,
      sub f t t' (prfWeaken h1.4 (byLeft __)) (prfWeaken h2.4 (byRight __)) idp
    )
  | symm prf p =>
    \let
      | h => prfFinite prf
    \in (h.1, h.2, h.3, symm h.4 p)
  | trans prf1 prf2 p =>
    \let
      | h1 => prfFinite prf1
      | h2 => prfFinite prf2
    \in (
      h1.1 ∪ h2.1,
      SubsetHelper.subsetUnion h1.2 h2.2,
      FinSets.FinUnion h1.3 h2.3,
      trans (prfWeaken h1.4 (byLeft __)) (prfWeaken h2.4 (byRight __)) p
    )
  | fcong {f} prfs idp idp p =>
    \let
      | prfs' => \lam i => prfFinite (prfs i)
      | S => \lam i => (prfs' i).1
    \in (
      finiteUnion S,
      SubsetHelper.subsetFiniteUnion {_} {S} (\lam i => (prfs' i).2),
      FinSets.FinFiniteUnion S (\lam i => (prfs' i).3),
      fcong (\lam i => prfWeaken (prfs' i).4 (SubsetHelper.subsetFiniteUnion' {_} {S} (i, idp))) idp idp p
    )
  | rcong prfs prf p =>
    \let
      | prf' => prfFinite prf
      | prfs' => \lam i => prfFinite (prfs i)
      | S => \lam i => (prfs' i).1
    \in (
      finiteUnion S ∪ prf'.1,
      SubsetHelper.subsetUnion (SubsetHelper.subsetFiniteUnion {_} {S} (\lam i => (prfs' i).2)) prf'.2 ,
      FinSets.FinUnion (FinSets.FinFiniteUnion S (\lam i => (prfs' i).3)) prf'.3,
      rcong
          (\lam i => prfWeaken (prfs' i).4 (\lam h => byLeft $ SubsetHelper.subsetFiniteUnion' {_} {S} (i, idp) h))
          (prfWeaken prf'.4 (byRight __)) p
    )
  | and prf1 prf2 p =>
    \let
      | h1 => prfFinite prf1
      | h2 => prfFinite prf2
    \in (
      h1.1 ∪ h2.1,
      SubsetHelper.subsetUnion h1.2 h2.2,
      FinSets.FinUnion h1.3 h2.3,
      and (prfWeaken h1.4 (byLeft __)) (prfWeaken h2.4 (byRight __)) p
    )
  | modusPonens f prf1 prf2 =>
    \let
      | h1 => prfFinite prf1
      | h2 => prfFinite prf2
    \in (
      h1.1 ∪ h2.1,
      SubsetHelper.subsetUnion h1.2 h2.2,
      FinSets.FinUnion h1.3 h2.3,
      modusPonens f (prfWeaken h1.4 (byLeft __)) (prfWeaken h2.4 (byRight __))
    )
  | cExistsIntro t prf p =>
    \let
      | h => prfFinite prf
    \in (h.1, h.2, h.3, cExistsIntro t h.4 p)
  | cAndElim1 prf p =>
    \let
      | h => prfFinite prf
    \in (h.1, h.2, h.3, cAndElim1 h.4 p)
  | cAndElim2 prf p =>
    \let
      | h => prfFinite prf
    \in (h.1, h.2, h.3, cAndElim2 h.4 p)
  | forAllIntro f prf p => rewrite p (forAllFinite prf)

  \where {
    \func forAllFinite {_ : DecLanguage} {c : Context} {axioms : Theory c} {f : Formula (suc c)}
                       (prf : Prf (liftTheory {_} {1} axioms) f) :
      \Sigma
        (axioms' : Theory c)
        (axioms' ⊆ axioms)
        (FinSet (Elements axioms'))
        (Prf axioms' (forAllH f)) =>
      \let
        -- first recursively get the axioms for proving f in the extended context
        | rec => prfFinite prf
        -- those axioms in the recursive call can the be equated to something in this context
        | (S', h) => extractFromSubsetLifted rec.2
        | sub => rewrite h in rec.2
        | fin => rewrite h in rec.3
        -- to make the finite proof fit the definition of FinSets.FinMap we do an addional map of the lifted axioms
        -- back to the unlifted axioms. S'' = S' proves the lift + unlift cancels out
        | S'' => mapSet {Formula (suc c)} {Formula c} (liftTheory {_} {1} S') (\lam x e => liftFormula.unliftFormula1 x (notFreeInLift.fromLiftTheory e))
        | S''fin : FinSet (Elements S'') => FinSets.FinMap fin _
        | S''=S' : S'' = S' => ext $ (\lam g => ext (
          \case \elim g, \elim __ \with {
            | _, inP (_, inP (x', e', idp), idp) =>
              \let foo => liftFormula.unliftLift {_} {_} {liftFormula 1 x'} idp notFreeInLift
              \in rewriteI foo e'
          },
          \case \elim g, \elim __ \with {
            | _, inP (x, e, idp) =>
              \let
                | h1 : Not (FreeInFormula x 0) => \case (prfFinite prf).2 e \with {
                  | inP (x1, _, p) => transportInv (\lam x0 => Not (FreeInFormula x0 0)) p notFreeInLift
                }
              \in inP (x, rewriteI h e, liftFormula.unliftFormula1.irrelevant {_} {_} {_} {_} {_} {h1} idp)
          }
        ))
      \in (
        S',
        SubsetHelper.mapSetSubst sub (Rename.unrename unfsuc __),
        rewriteI S''=S' S''fin,
        forAllIntro f (rewrite h in rec.4) idp
      )

    \private \func extractFromSubsetLifted {_ : Language} {c : Context} {S : Theory (suc c)} {T : Theory c} (h : S ⊆ liftTheory {_} {1} T)
      : \Sigma (S' : Theory c) (S = liftTheory {_} {1} S') =>
        (mapSet S (\lam f e => liftFormula.unliftFormula1 f (\case h e \with {
          | inP (x,e,p) => rewrite p $ notFreeInLift
        })),
         ext (\lam f => ext (
           \lam s => \case h s \with {
             | inP (x,e,p) => inP (x, inP (f, s, liftFormula.unliftLift p (rewrite p notFreeInLift)) , p)
           },
           \lam l => \case \elim l \with {
             | inP (_, inP (x', e', idp), p) => \case h e' \with {
               | inP (_, _, p'') =>
                 \let
                   | nf : Not (FreeInFormula x' 0) => rewrite p'' notFreeInLift
                   | q => liftFormula.liftUnlift nf p
                 \in transport S q e'
             }
           }
         )))
  }