\import Function.Meta
\import Set.Subset
\import proof.Proof
\import syntax.Context
\import syntax.Syntax
\import util.SetUtil

\func prfWeaken {_ : Language} {c : Context} {axioms axioms' : Theory c}
                {f : Formula c} (prf : Prf axioms' f)
                (sub : axioms' âŠ† axioms)  : Prf axioms f
\elim f, prf
  | f, AXM e => AXM (sub e)
  | _, contra f' prf1 prf2 => contra f' (prfWeaken prf1 sub) (prfWeaken prf2 sub)
  | impH f f1, introImp prf => introImp (prfWeaken prf $ SubsetHelper.subsetAdd sub)
  | equal a b, refl p => refl p
  | notH (impH (notH f) g), notImp h1 h2 => notImp (prfWeaken h1 sub) (prfWeaken h2 sub)
  | notH _, notFalse idp => notFalse idp
  | notH (equal a b), notEqual h => notEqual h
  | f, forAllElim fa e t prf => forAllElim fa (sub e) t (prfWeaken prf (SubsetHelper.subsetAdd sub))
  | notH (equal a b), notEqualSymm prf => notEqualSymm (prfWeaken prf sub)
  | notH f, notHFromimpH f' prf prf1 => notHFromimpH f' (prfWeaken prf sub) (prfWeaken prf1 sub)
  | _, sub f t t' prf1 prf2 idp => Prf.sub f t t' (prfWeaken prf1 sub) (prfWeaken prf2 sub) idp
  | equal a b, symm prf => symm (prfWeaken prf sub)
  | equal a b, trans prf1 prf2 => trans (prfWeaken prf1 sub) (prfWeaken prf2 sub)
  | equal a b, fcong prfs pa pb => fcong (\lam i => prfWeaken (prfs i) sub) pa pb
  | atomic r terms, rcong prfs prf => rcong (\lam i => prfWeaken (prfs i) sub) (prfWeaken prf sub)