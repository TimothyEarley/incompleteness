\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import proof.Proof
\import semantics.Interpretation
\import syntax.Context
\import syntax.Substitution
\import syntax.Syntax
\open Interpretation

\func prfCorrectness {_ : Language} {c : Context} {axioms : Theory c} {toShow : Formula c}
                     (prf : Prf axioms toShow)

                     (dummy : \Pi {c : Context} -> Term c) -- TODO remove this
  : axioms Interpretation.⊧I toShow
\elim prf
  | AXM e => \lam _ m => m e
  | contra f prf1 prf2 => \lam I mAxioms => absurd $
  ⊧.contradict (prfCorrectness prf2 dummy I mAxioms) (prfCorrectness prf1 dummy I mAxioms)
  | introImp prf idp => \lam I mAxioms mA => prfCorrectness prf dummy I (⊧A.fromAdd mAxioms mA)
  | refl idp idp => \lam _ _ => idp
  | notImp h1 h2 idp => \lam I mAxioms mImp =>
      \let
        | h1' => prfCorrectness h1 dummy I mAxioms
        | h2' => prfCorrectness h2 dummy I mAxioms
      \in h2' $ mImp $ h1'
  | notFalse idp => \lam _ _ mH => mH (\lam _ => idp)
  | notEqual h idp => \lam I _ evalEqual => h I evalEqual
  | forAllElim fa prfAll t prf => \lam I mAxioms =>
      \let
        | goal : I ⊧ Substitution.subst fa t =>
          \let rec => prfCorrectness prfAll dummy I mAxioms
          \in ⊧.fromSub (rec (evaluate I t))
      \in prfCorrectness prf dummy I (⊧A.fromAdd mAxioms goal)
  | notEqualSymm prf idp => \lam I mAxioms p => prfCorrectness prf dummy I mAxioms (inv p)
  | notHFromimpH f' prf prf1 idp => \lam I mAxioms mF => prfCorrectness prf dummy I mAxioms (prfCorrectness prf1 dummy I mAxioms mF)
  | sub f t t' prf prf' idp => \lam I mAxioms =>
      \let
        | h1 => prfCorrectness prf dummy I mAxioms
        | h2 => prfCorrectness prf' dummy I mAxioms
        | h1' => Interpretation.models.fromSub.substitutionLemma-> I {extend I (evaluate I t)}
            (\case \elim __ \with {
              | 0 => idp
              | suc _ => idp
            })
            h1
        | h1'' => rewrite h2 in h1'
      \in Interpretation.models.fromSub.substitutionLemma<- I {extend I (evaluate I t')} (\case \elim __ \with {
        | 0 => idp
        | suc _ => idp
      }) h1''
  | symm prf idp => \lam I mAxioms => inv $ prfCorrectness prf dummy I mAxioms
  | trans prf1 prf2 idp => \lam I mAxioms => prfCorrectness prf1 dummy I mAxioms *> prfCorrectness prf2 dummy I mAxioms
  | fcong {_} {_} {f} {args} {args'} prfs idp idp idp =>
    \let prfs' => prfCorrectnessArray (\lam i => equal (args i) (args' i)) prfs dummy
    \in \lam I m => pmap (fun f) (ext (ext (\lam j => prfs' j I m)))
  | rcong {r} {args} {args'} prfs prf idp => \lam (I : Interpretation) m =>
      \let
        | prf' => prfCorrectness prf dummy I m
        | prfs' => prfCorrectnessArray (\lam i => equal (args i) (args' i)) prfs dummy
        | h :
          (\new Array (Universe {I.structure}) (relArity r) (\lam i => evaluate I (args i))) =
          (\new Array (Universe {I.structure}) (relArity r) (\lam i => evaluate I (args' i)))
        => ext (ext (\lam j => prfs' j I m))
      \in rewrite h prf'
  | and prf1 prf2 idp => \lam I m => (prfCorrectness prf1 dummy I m, prfCorrectness prf2 dummy I m)
  | modusPonens f prf1 prf2 => \lam I m => prfCorrectness prf2 dummy I m (prfCorrectness prf1 dummy I m)
  | cExistsIntro t prf idp => \lam I m =>
      \let
        h => prfCorrectness prf dummy I m
      \in inP (
        Interpretation.evaluate I t,
        models.fromSub.substitutionLemma-> {_} {suc c} {c} {_} I {extend I (evaluate I t)} {Substitution.substOne t}
            (\lam (v : Fin (suc c)) => \case \elim v \with {
              | 0 => idp
              | suc f => idp
            })
            h
      )
  | cAndElim1 prf idp => \lam I m => \let rec => prfCorrectness prf dummy I m \in rec.1
  | cAndElim2 prf idp => \lam I m => \let rec => prfCorrectness prf dummy I m \in rec.2
  | forAllIntro f prf idp => \lam I m u => prfCorrectness prf dummy (extend I u) (⊧A.lifted m dummy) -- here is where the dummy is used
  \where {
    -- to work around termintation checking

    \func prfCorrectnessArray {_ : Language} {c : Context} {axioms : Theory c} (toShow : Array (Formula c))
                              (prfs : DArray (\lam i => Prf axioms (toShow i)))

                              (dummy : \Pi {c : Context} -> Term c) -- TODO remove this
      : DArray (\lam i => axioms ⊧I toShow i)
    \elim toShow, prfs
      | nil, nil => nil
      | a :: l, p :: prfs => prfCorrectness p dummy :: prfCorrectnessArray l prfs dummy
  }