\import Logic
\import semantics.Interpretation
\import syntax.Context
\import syntax.lift.Lift
\import syntax.Substitution
\import syntax.Syntax
\import util.SetUtil


-- the type of proofs.

\data Prf {L : Language} {c : Context} (axioms : Theory c) (toShow : Formula c) : \Set
  | AXM (e : toShow ∈ axioms)
  -- not classical, so needs decider in prdCorrectness
  -- | PC (psi : Formula c) (Prf (add axioms psi) toShow) (Prf (add axioms (notH psi)) toShow)
  -- | Ctr (psi : Formula c) (Prf (add axioms (notH toShow)) psi) (Prf (add axioms (notH toShow)) (notH psi))
  | contra (f : Formula c) (Prf axioms (notH f)) (Prf axioms f)

  | forAllElim (f : Formula (suc c)) (Prf axioms (forAllH f)) (t : Term c) (Prf (add axioms (Substitution.subst f t)) toShow)
  | forAllIntro (f : Formula (suc c)) (Prf (liftTheory {_} {1} axioms) f) (toShow = forAllH f)

  | sub
    (f : Formula (Context.inc c))
    (t t' : Term c)
    (Prf axioms (Substitution.subst f t)) (Prf axioms (equal t t'))
    (p : toShow = Substitution.subst f t')

  -- TODO: did i miss this rule somewhere?
  | modusPonens (f : Formula c) (prf : Prf axioms f) (prf' : Prf axioms (impH f toShow))

  | cAndElim1 {f g : Formula c} (prf : Prf axioms (cAnd f g)) (toShow = f)
  | cAndElim2 {f g : Formula c} (prf : Prf axioms (cAnd f g)) (toShow = g)
  | introImp {a b : Formula c} (Prf (add axioms a) b) (toShow = impH a b)

  | refl {a b : Term c} (a = b) (toShow = equal a b)

  -- TODO too lazy to prove stuff with sub atm, so use special cases
  | symm {a b : Term c} (Prf axioms (equal b a)) (toShow = equal a b)
  | trans {a b : Term c} {t : Term c} (Prf axioms (equal a t)) (Prf axioms (equal t b)) (toShow = equal a b)
  | fcong {a b : Term c} {f : Functions} {args args' : Array (Term c) (funArity f)}
          (prfs : DArray {funArity f} (\lam i => Prf axioms (equal (args i) (args' i))))
          (pa : a = apply f args) (pb : b = apply f args') (toShow = equal a b)

  | and {a b : Formula c} (Prf axioms a) (Prf axioms b) (toShow = cAnd a b)

  | cExistsIntro {f : Formula (suc c)} (t : Term c) (prf : Prf axioms (Substitution.subst f t)) (toShow = cExists f)


  -- TODO what is this rule?
  -- ¬(¬f -> g) = ¬(f ∨ g) = ¬f ∧ ¬g
  | notImp {f g : Formula c} (Prf axioms (notH f)) (Prf axioms (notH g)) (toShow = notH (impH (notH f) g))

  -- more crutches
  | notFalse (toShow = notH FormulaExtensions.falseH)
  | notEqual {a b : Term c}
             (\Pi (I : Interpretation c) -> Not (Interpretation.evaluate I a = Interpretation.evaluate I b)) (toShow = notH (equal a b))
  | notEqualSymm {a b : Term c}
                 (Prf axioms (notH (equal b a))) (toShow = notH (equal a b))
  | notHFromimpH {f : Formula c} (f' : Formula c) (h : Prf axioms (notH f')) (h' : Prf axioms (impH f f')) (toShow = notH f)
  | rcong {r : Relations}
          {args args' : Array (Term c) (relArity r)}
          (prfs : DArray {relArity r} (\lam i => Prf axioms (equal (args i) (args' i))))
          (prf : Prf axioms (atomic r args'))
          (toShow = atomic r args)

\func Prf' {_ : Language} {c : Context} (axioms : Theory c) (toShow : Formula c) : \Prop => TruncP (Prf axioms toShow)