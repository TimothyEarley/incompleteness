\import Data.Fin
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import proof.Proof
\import proof.TermCongruence
\import semantics.Interpretation
\import syntax.Context
\import syntax.Substitution
\import syntax.Syntax
\import util.ArrayUtil
\open Interpretation (⊧)

\func TermInterpretation {_ : Language} {c : Context} (T : Theory c) : Interpretation c \cowith
  | structure => \new Structure {
    | Universe => Quotient {Term c} (~ {ProvableEqualCongruence T})
    | fun f args => overArray args (Quotient {Term c} (~ {ProvableEqualCongruence T}))
        (in~ $ apply f __)
        (\lam d => ~-equiv {_} _ _ (inP (fcong d idp idp idp)))
    | rel r args => overArray args \Prop
        (\lam z => Prf' T (atomic r z))
        (\lam h' => ext (\lam (inP p) => inP (rcong (\lam i => symm (h' i) idp) p idp), \lam (inP p) => inP (rcong h' p idp)))
  }
  | variableValues v => in~ (var v)

  \where {
    \func overArray{_ : Language} {c : Context} {T : Theory c}
                   {n : Nat} (args : Array (Quotient {Term c} (~ {ProvableEqualCongruence T})) n)
                   (R : \Set)
                   (f : Array (Term c) n -> R)
                   (e : \Pi {x y : Array (Term c) n} (DArray (\lam (i : Fin n) => Prf T (equal (x i) (y i)))) -> f x = f y)
      : R =>
      \case Quotient.liftArray {n} {\lam _ => Term c} (\lam t t' => ~ {ProvableEqualCongruence T} t t') (\lam _ => ~-reflexive {ProvableEqualCongruence T}) args \with {
        | in~ a => f a
        | ~-equiv x y h => \case truncPArray {n} h \with {
          | inP h' => e h'
        }
      }

    \func overArray= {_ : Language} {c : Context} {T : Theory c}
                     {n : Nat} (args : Array (Term c) n)
                     {R : \Set} {f : Array (Term c) n -> R}
                     {e : \Pi {x y : Array (Term c) n} (DArray (\lam (i : Fin n) => Prf T (equal (x i) (y i)))) -> f x = f y}
      : overArray (\lam i => in~ (args i)) R f e = f args =>
      unfold overArray $ rewrite (liftArray= {n} {\lam (_ : Fin n) => Term c}) idp
      \where {
        \func liftArray= {k : Nat} {A : Fin k -> \Type}
                         {R : \Pi {j : Fin k} -> A j -> A j -> \Type}
                         {refl : \Pi {j : Fin k} (x : A j) -> R x x}
                         {ts : DArray A}
          : Quotient.liftArray {k} R refl (\lam j => in~ (ts j)) = in~ ts
        \elim k, ts
          | 0, nil => idp
          | suc k, a :: ts =>
            \let
              | rec => liftArray= {k} {\lam j => A (fsuc j)} {\lam {_} => R} {\lam {_} => refl} {ts}
            \in rewrite rec $ idp
      }

    \func termsAre~ {_ : Language} {c : Context} {T : Theory c} (t : Term c)
      : Interpretation.evaluate (TermInterpretation T) t = in~ t
    \elim t
      | var v => idp
      | apply f args =>
        \let
          | p : (\lam i => Interpretation.evaluate (TermInterpretation T) (args i)) = (\lam i => in~ (args i)) =>
            ext (\lam i => termsAre~ (args i))
        \in run {
          unfold,
          transportInv (\lam z => overArray
              z
              (Quotient (~))
              (\lam p0 => in~ (apply f p0))
              (\lam {x} {y} d => path (~-equiv (apply f x) (apply f y) (inP (fcong d idp idp idp)))) = in~ (apply f args)) p,
          overArray= args
        }

    \func isModelForEqual {_ : Language} {c : Context} {T : Theory c} {t t' : Term c}
      : (TermInterpretation T) ⊧ (equal t t') <-> Prf' T (equal t t') =>
      (\lam p => Quotient.equalityEquiv _ $ inv (termsAre~ t) *> p *> termsAre~ t',
       \lam p => termsAre~ t *> path (~-equiv t t' p) *> inv (termsAre~ t'))

    \func isModelForAtomic {_ : Language} {c : Context} {T : Theory c} {r : Relations} {args : Array (Term c) (relArity r)}
      : (TermInterpretation T) ⊧ (atomic r args) <-> Prf' T (atomic r args) =>
      \let
        | p : (\lam i => Interpretation.evaluate (TermInterpretation T) (args i)) = (\lam i => in~ (args i)) =>
          ext (\lam i => termsAre~ (args i))
      \in (\lam m =>
               \let
                 | m' => unfold in m
                 | m'' => transport (\lam z =>
                     overArray z \Prop (\lam z => Prf' T (atomic r z))
                         (\lam {x} {y} h' => propExt (\lam p0 => \case p0 \with {
                           | inP p => inP (rcong (\new DArray (\lam i => Prf T (equal (y i) (x i))) (\lam i => symm (h' i) idp)) p idp)
                         })
                             (\lam p0 => \case p0 \with {
                               | inP p => inP (rcong h' p idp)
                             }))) p m'
                 | m''' => rewrite (overArray= args) in m''
               \in m''',
           \lam prf => run {
             unfold,
             transportInv (\lam z =>
                 overArray
                     z
                     \Prop
                     (\lam z => Prf' T (atomic r z))
                     (\lam {x} {y} h' => propExt (\lam p0 => \case p0 \with {
                       | inP p => inP (rcong (\new DArray (\lam i => Prf T (equal (y i) (x i))) (\lam i => symm (h' i) idp)) p idp)
                     }) (\lam p0 => \case p0 \with {
                       | inP p => inP (rcong h' p idp)
                     }))) p,
             rewrite (overArray= args),
             prf
           })

    \func isModelForExists {_ : Language} {c : Context} {T : Theory c} {f : Formula (suc c)}
      : (TermInterpretation T) ⊧ cExists f <-> ∃ (t : Term c) ((TermInterpretation T) ⊧ Substitution.subst f t) =>
      (\case __ \with {
        | inP (in~ t, m) => inP
            (
              t,
              ⊧.fromSub.substitutionLemma<-
                  (TermInterpretation T)
                  (\lam (v : Fin (suc c)) _ => \case \elim v \with {
                    | 0 => inv $ termsAre~ t
                    | suc v => termsAre~ (var v)
                  })
                  m
            )
      },
       \lam (inP (t, m)) => inP
           (
             in~ t,
             ⊧.fromSub.substitutionLemma->
                 (TermInterpretation T)
                 (\lam (v : Fin (suc c)) _ => \case \elim v \with {
                   | 0 => inv $ termsAre~ t
                   | suc v => termsAre~ (var v)
                 })
                 m
           )
      )

    \func isModelForAll {_ : Language} {c : Context} {T : Theory c} {f : Formula (suc c)}
      : (TermInterpretation T) ⊧ forAllH f <-> ( \Pi (t : Term c) -> (TermInterpretation T) ⊧ Substitution.subst f t ) =>
      (\lam m t =>
           \let m' => m (in~ t)
           \in ⊧.fromSub.substitutionLemma<-
               (TermInterpretation T)
               (\lam (v : Fin (suc c)) _ => \case \elim v \with {
                 | 0 => inv $ termsAre~ t
                 | suc v => termsAre~ (var v)
               })
               m',
       \lam h (in~ t) =>
           \let h' => h t
           \in ⊧.fromSub.substitutionLemma->
               (TermInterpretation T)
               (\lam (v : Fin (suc c)) _ => \case \elim v \with {
                 | 0 => inv $ termsAre~ t
                 | suc v => termsAre~ (var v)
               })
               h')
  }